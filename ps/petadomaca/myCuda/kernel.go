// Code generated by cudago. Edit at your own risk.
package myCuda

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __kernel_useless_var__ unsafe.Pointer = nil

const (
	KeyKernel = "kernel"
)


type helloArgs struct {
    message uintptr

}
type processArgs struct {
    img_in uintptr
    img_out uintptr
    width int32
    height int32

}

/*var (
    helloArgs = helloArgs{}

    processArgs = processArgs{}

)*/







func Hello(grid, block cuda.Dim3, message uintptr) error {
	err := autoloadLib_kernel()
	if err != nil {
		return err
	}
	kern, err := getKernel("kernel", "hello")
	if err != nil {
		return err
	}
	
	params := helloArgs{
	    message: message,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.message))
}

func HelloEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, message uintptr) error {
	err := autoloadLib_kernel()
	if err != nil {
		return err
	}
	kern, err := getKernel("kernel", "hello")
	if err != nil {
		return err
	}
	
	params := helloArgs{
	    message: message,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.message))
}




func Process(grid, block cuda.Dim3, img_in uintptr, img_out uintptr, width int32, height int32) error {
	err := autoloadLib_kernel()
	if err != nil {
		return err
	}
	kern, err := getKernel("kernel", "process")
	if err != nil {
		return err
	}
	
	params := processArgs{
	    img_in: img_in,
	    img_out: img_out,
	    width: width,
	    height: height,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.img_in), unsafe.Pointer(&params.img_out), unsafe.Pointer(&params.width), unsafe.Pointer(&params.height))
}

func ProcessEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, img_in uintptr, img_out uintptr, width int32, height int32) error {
	err := autoloadLib_kernel()
	if err != nil {
		return err
	}
	kern, err := getKernel("kernel", "process")
	if err != nil {
		return err
	}
	
	params := processArgs{
	    img_in: img_in,
	    img_out: img_out,
	    width: width,
	    height: height,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.img_in), unsafe.Pointer(&params.img_out), unsafe.Pointer(&params.width), unsafe.Pointer(&params.height))
}



var loaded_kernel = false


var pathToCompile_kernel = "kernel.cu"
func autoloadLib_kernel() error {
	var code []byte
	if loaded_kernel {
		return nil
	}
	code, err := compileFile(pathToCompile_kernel)
	if err != nil {
		return err
	}
	err = InitLibrary([]byte(code), "kernel")
	if err != nil {
		return err
	}
	loaded_kernel = true
	return nil
}

