// prevajanje datoteke *.proto na Arnes HPC:
//   - namestitev modulov
//      module load protobuf/23.0-GCCcore-12.2.0
//      module load binutils/2.39-GCCcore-12.2.0
//      go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.31.0 # samo ob prvi uporabi
//      go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0 # samo ob prvi uporabi
//      export PATH="$PATH:$(go env GOPATH)/bin"
//   - prevajanje
//      srun protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative protobufStorage.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: protobufStorage.proto

package protobufStorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CRUD_Put_FullMethodName    = "/protobufStorage.CRUD/Put"
	CRUD_Get_FullMethodName    = "/protobufStorage.CRUD/Get"
	CRUD_Commit_FullMethodName = "/protobufStorage.CRUD/Commit"
)

// CRUDClient is the client API for CRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRUDClient interface {
	Put(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error)
	Commit(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewCRUDClient(cc grpc.ClientConnInterface) CRUDClient {
	return &cRUDClient{cc}
}

func (c *cRUDClient) Put(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRUD_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) Get(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*TodoStorage, error) {
	out := new(TodoStorage)
	err := c.cc.Invoke(ctx, CRUD_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRUDClient) Commit(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRUD_Commit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRUDServer is the server API for CRUD service.
// All implementations must embed UnimplementedCRUDServer
// for forward compatibility
type CRUDServer interface {
	Put(context.Context, *Todo) (*emptypb.Empty, error)
	Get(context.Context, *Todo) (*TodoStorage, error)
	Commit(context.Context, *Todo) (*emptypb.Empty, error)
	mustEmbedUnimplementedCRUDServer()
}

// UnimplementedCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedCRUDServer struct {
}

func (UnimplementedCRUDServer) Put(context.Context, *Todo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCRUDServer) Get(context.Context, *Todo) (*TodoStorage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCRUDServer) Commit(context.Context, *Todo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedCRUDServer) mustEmbedUnimplementedCRUDServer() {}

// UnsafeCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRUDServer will
// result in compilation errors.
type UnsafeCRUDServer interface {
	mustEmbedUnimplementedCRUDServer()
}

func RegisterCRUDServer(s grpc.ServiceRegistrar, srv CRUDServer) {
	s.RegisterService(&CRUD_ServiceDesc, srv)
}

func _CRUD_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Put(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Get(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRUD_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRUDServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRUD_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRUDServer).Commit(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

// CRUD_ServiceDesc is the grpc.ServiceDesc for CRUD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRUD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobufStorage.CRUD",
	HandlerType: (*CRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _CRUD_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CRUD_Get_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _CRUD_Commit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobufStorage.proto",
}
